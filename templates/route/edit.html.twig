{% extends 'base.html.twig' %}

{% block title %}Modifier la route{% endblock %}

{% block body %}
    <div class="container">
        <h1 class="text-center my-4">Modifier la route</h1>

        {{ form_start(form, {'attr': {'id': 'route-form', 'novalidate': 'novalidate'}}) }}
            <div class="mb-3">
                {{ form_label(form.startLocation) }}
                {{ form_widget(form.startLocation, {'attr': {'class': 'form-control', 'placeholder': 'Entrez le lieu de départ'}}) }}
                <small class="text-danger error-message" id="startLocation-error"></small>
                {{ form_errors(form.startLocation) }}
            </div>

            <div class="mb-3">
                {{ form_label(form.endLocation) }}
                {{ form_widget(form.endLocation, {'attr': {'class': 'form-control', 'placeholder': 'Entrez le lieu d\'arrivée'}}) }}
                <small class="text-danger error-message" id="endLocation-error"></small>
                {{ form_errors(form.endLocation) }}
            </div>

            <div class="mb-3">
                {{ form_label(form.waypoints) }}
                {{ form_widget(form.waypoints, {'attr': {'class': 'form-control', 'placeholder': 'Entrez les points de passage (facultatif)'}}) }}
                <small class="text-danger error-message" id="waypoints-error"></small>
                {{ form_errors(form.waypoints) }}
            </div>

            <div class="mb-3">
                {{ form_label(form.estimationDuration) }}
                {{ form_widget(form.estimationDuration, {'attr': {'class': 'form-control', 'placeholder': 'Durée estimée (en minutes)'}}) }}
                <small class="text-danger error-message" id="estimationDuration-error"></small>
                {{ form_errors(form.estimationDuration) }}
            </div>

            <div class="mb-3">
                {{ form_label(form.vehiculeType) }}
                {{ form_widget(form.vehiculeType, {'attr': {'class': 'form-control', 'placeholder': 'Type de véhicule'}}) }}
                <small class="text-danger error-message" id="vehiculeType-error"></small>
                {{ form_errors(form.vehiculeType) }}
            </div>

            <div class="text-center">
                <button type="submit" class="btn btn-warning">Modifier la route</button>
                <a href="{{ path('route_index') }}" class="btn btn-secondary">Retour à la liste</a>
            </div>
        {{ form_end(form) }}
    </div>
{% endblock %}

{% block js %}
    {{ parent() }}
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const form = document.getElementById('route-form');
            
            // Réinitialiser tous les messages d'erreur
            function resetErrors() {
                const errorElements = document.querySelectorAll('.error-message');
                errorElements.forEach(element => {
                    element.textContent = '';
                });
                
                // Réinitialiser les styles des champs
                const formInputs = form.querySelectorAll('input, select, textarea');
                formInputs.forEach(input => {
                    input.classList.remove('is-invalid');
                    input.classList.remove('is-valid');
                });
            }
            
            // Valider le formulaire
            function validateForm() {
                resetErrors();
                let isValid = true;
                
                // Récupérer les champs
                const startLocation = form.querySelector('[name$="[startLocation]"]');
                const endLocation = form.querySelector('[name$="[endLocation]"]');
                const estimationDuration = form.querySelector('[name$="[estimationDuration]"]');
                const vehiculeType = form.querySelector('[name$="[vehiculeType]"]');
                
                // Valider le lieu de départ
                if (!startLocation.value.trim()) {
                    document.getElementById('startLocation-error').textContent = 'Le lieu de départ est obligatoire.';
                    startLocation.classList.add('is-invalid');
                    isValid = false;
                } else if (startLocation.value.trim().length < 3) {
                    document.getElementById('startLocation-error').textContent = 'Le lieu de départ doit contenir au moins 3 caractères.';
                    startLocation.classList.add('is-invalid');
                    isValid = false;
                } else {
                    startLocation.classList.add('is-valid');
                }
                
                // Valider le lieu d'arrivée
                if (!endLocation.value.trim()) {
                    document.getElementById('endLocation-error').textContent = 'Le lieu d\'arrivée est obligatoire.';
                    endLocation.classList.add('is-invalid');
                    isValid = false;
                } else if (endLocation.value.trim().length < 3) {
                    document.getElementById('endLocation-error').textContent = 'Le lieu d\'arrivée doit contenir au moins 3 caractères.';
                    endLocation.classList.add('is-invalid');
                    isValid = false;
                } else {
                    endLocation.classList.add('is-valid');
                }
                
                // Valider la durée estimée
                if (!estimationDuration.value.trim()) {
                    document.getElementById('estimationDuration-error').textContent = 'La durée estimée est obligatoire.';
                    estimationDuration.classList.add('is-invalid');
                    isValid = false;
                } else if (isNaN(estimationDuration.value) || parseInt(estimationDuration.value) <= 0) {
                    document.getElementById('estimationDuration-error').textContent = 'La durée doit être un nombre positif.';
                    estimationDuration.classList.add('is-invalid');
                    isValid = false;
                } else {
                    estimationDuration.classList.add('is-valid');
                }
                
                // Valider le type de véhicule
                if (!vehiculeType.value.trim()) {
                    document.getElementById('vehiculeType-error').textContent = 'Le type de véhicule est obligatoire.';
                    vehiculeType.classList.add('is-invalid');
                    isValid = false;
                } else {
                    vehiculeType.classList.add('is-valid');
                }
                
                return isValid;
            }
            
            // Événement de soumission du formulaire
            form.addEventListener('submit', function(event) {
                if (!validateForm()) {
                    event.preventDefault();
                    // Faire défiler jusqu'au premier champ avec erreur
                    const firstError = document.querySelector('.is-invalid');
                    if (firstError) {
                        firstError.scrollIntoView({ behavior: 'smooth', block: 'center' });
                        firstError.focus();
                    }
                }
            });
            
            // Validation en temps réel lors de la saisie
            const formInputs = form.querySelectorAll('input, select, textarea');
            formInputs.forEach(input => {
                input.addEventListener('blur', function() {
                    // Réinitialiser uniquement ce champ
                    this.classList.remove('is-invalid');
                    this.classList.remove('is-valid');
                    
                    const fieldName = this.name.match(/\[([^\]]+)\]$/)[1];
                    const errorElement = document.getElementById(fieldName + '-error');
                    errorElement.textContent = '';
                    
                    // Valider ce champ spécifique
                    if (!this.value.trim() && this.name.indexOf('waypoints') === -1) {
                        errorElement.textContent = 'Ce champ est obligatoire.';
                        this.classList.add('is-invalid');
                    } else if (fieldName === 'estimationDuration' && (isNaN(this.value) || parseInt(this.value) <= 0)) {
                        errorElement.textContent = 'La durée doit être un nombre positif.';
                        this.classList.add('is-invalid');
                    } else if ((fieldName === 'startLocation' || fieldName === 'endLocation') && this.value.trim().length < 3) {
                        errorElement.textContent = 'Ce champ doit contenir au moins 3 caractères.';
                        this.classList.add('is-invalid');
                    } else if (this.value.trim()) {
                        this.classList.add('is-valid');
                    }
                });
            });
        });
    </script>
{% endblock %}